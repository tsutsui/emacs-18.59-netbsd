name: CI

on:
  push:
  pull_request:

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        container: [ "ubuntu:22.04", "ubuntu:latest", "debian:12", "debian:11", "archlinux:base", "almalinux:8", "almalinux:9", "opensuse/leap", "fedora:40", "fedora:41" ]

    runs-on: ubuntu-latest

    container:
      image: ${{ matrix.container }}
      options: --privileged

    steps:
      - name: install packages
        run: |
          uname -a
          case "${{ matrix.container }}" in
          ubuntu*|debian*)
            apt-get update -q
            apt-get upgrade -qy
            apt-get install -qy make gcc libx11-dev ncurses-dev
            ;;
          archlinux*)
            pacman -Syyu --noconfirm make gcc libx11 ncurses
            ;;
          almalinux*)
            dnf update -y
            dnf install -y make gcc libX11-devel ncurses-devel
            ;;
          opensuse*)
            zypper update -y
            zypper install -y gzip tar # for actions/checkout@v4
            zypper install -y make gcc libX11-devel ncurses-devel
            ;;
          fedora*)
            dnf update -y
            dnf install -y make gcc libX11-devel ncurses-devel
            ;;
          esac

      - uses: actions/checkout@v4

      - name: configure and make
        run: |
          sh -c "echo 0 > /proc/sys/kernel/randomize_va_space"
          cp src/config.h-linux src/config.h
          make
          make install

  build-linux-qemu:
    name: "build-linux qemu"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [386, arm, arm64]
        include:
          - arch: 386
            image: i386/ubuntu:latest
            platform: linux/386
          - arch: arm
            image: arm32v7/ubuntu:latest
            platform: linux/arm/v7
          - arch: arm64
            image: arm64v8/ubuntu:latest
            platform: linux/arm64

    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.arch }}

      - name: Run build process with Docker
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.image }}
          options: |
            --privileged
            --platform ${{ matrix.platform }}
            --volume ${{ github.workspace }}:/build
            --workdir /build
          run: |
            uname -a
            apt-get update -q
            apt-get upgrade -qy
            apt-get install -qy make gcc libx11-dev ncurses-dev
            sysctl kernel.randomize_va_space=0
            cp src/config.h-linux src/config.h
            make
            make install

  build-netbsd:
    name: "build-netbsd (NetBSD/amd64 10.1 with pkgsrc)"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install packages and run configure and make (on the NetBSD VM)
        uses: vmactions/netbsd-vm@v1
        with:
          release: "10.1"
          copyback: false
          prepare: |
            uname -a
            ftp -o - https://cdn.NetBSD.org/pub/NetBSD/NetBSD-`uname -r`/amd64/binary/sets/xbase.tar.xz | tar -C / -zxpf - ./usr/X11R7/bin ./usr/X11R7/include ./usr/X11R7/lib ./usr/X11R7/share
            ftp -o - https://cdn.NetBSD.org/pub/NetBSD/NetBSD-`uname -r`/amd64/binary/sets/xcomp.tar.xz | tar -C / -zxpf - ./usr/X11R7/include ./usr/X11R7/lib ./usr/X11R7/share

          run: |
            cp src/config.h-netbsd src/config.h
            make
            make install

  build-netbsd-vax:
    name: "build-netbsd (NetBSD/vax 10.1 with pkgsrc and simh)"
    runs-on: ubuntu-latest

    steps:
      - name: install packages to build opensimh etc.
        run: |
          sudo snap remove firefox # to avoid extra upgrade
          sudo apt-get purge firefox
          sudo apt-get autoremove
          sudo apt-get update -q
          sudo apt-get upgrade -qy
          sudo apt-get install -qy build-essential libpcap-dev libpcre3-dev vde2 libsdl2-dev libsdl2-ttf-dev libedit-dev

      - name: fetch NetBSD sources and build crossbuild toolchains
        run: |
          MACHINE=vax
          echo "MACHINE=$MACHINE" >> $GITHUB_ENV
          TARGET_ENDIAN=le
          echo "TARGET_ENDIAN=$TARGET_ENDIAN" >> $GITHUB_ENV
          RELEASE=10.1
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          NETBSDHOST=cdn.NetBSD.org
          echo "NETBSDHOST=$NETBSDHOST" >> $GITHUB_ENV
          RELEASEDIR=pub/NetBSD/NetBSD-${RELEASE}
          echo "RELEASEDIR=$RELEASEDIR" >> $GITHUB_ENV
          IMAGE=netbsd-${MACHINE}.img
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          cd $HOME
          URL_SRCSETS=https://${NETBSDHOST}/${RELEASEDIR}/source/sets
          SRCSETS="gnusrc sharesrc src syssrc"
          for f in ${SRCSETS}; do
            echo fetch and extract $f.tgz
            curl -sSL ${URL_SRCSETS}/$f.tgz | tar -zxf -
          done
          (cd usr/src && sh build.sh -m ${MACHINE} -U -u -j 4 -T tooldir.${MACHINE} -V MKGCC=no -V MKSHARE=no -V OBJMACHINE=1 tools)

      - name: fetch NetBSD/vax binary sets
        run: |
          cd $HOME
          SETS="kern-GENERIC base etc comp misc text xbase xcomp xetc xserver"
          URL_BINSETS=https://${NETBSDHOST}/${RELEASEDIR}/${MACHINE}/binary/sets
          mkdir targetroot
          for f in ${SETS}; do
            echo fetch and extract $f.tgz
            curl -sSL ${URL_BINSETS}/$f.tgz | tar -C targetroot -zxf -
          done
          chmod u+r targetroot/var/spool/ftp/hidden

      - name: create NetBSD/vax images
        run: |
          cd $HOME
          VMHOSTNAME=microvax
          HOST_IP=10.0.2.2
          TOOLDIR=$HOME/usr/src/tooldir.${MACHINE}
          PRIMARY_BOOT=usr/mdec/sdboot
          IMAGEMB=4096
          IMAGESECTORS=$((${IMAGEMB} * 1024 * 1024 / 512))
          IMAGESIZE=$((${IMAGESECTORS} * 512))
          HEADS=64
          SECTORS=32
          CYLINDERS=$((${IMAGESECTORS} / ( ${HEADS} * ${SECTORS} ) ))
          cat > targetroot/etc/fstab <<EOF
          ROOT.a / ffs rw,log 1 1
          #ROOT.b none none sw
          kernfs /kern kernfs rw
          ptyfs /dev/pts ptyfs rw
          procfs /proc procfs rw
          EOF
          sed -e 's/rc_configured=NO/rc_configured=YES/' targetroot/etc/rc.conf > rc.conf
          cat >> rc.conf <<EOF
          hostname=${VMHOSTNAME}
          no_swap=YES
          ccd=NO
          raidframe=NO
          cgd=NO
          savecore=NO
          update_motd=NO
          dmesg=NO
          quota=NO
          ldconfig=NO 
          modules=NO
          ppp=NO
          syslogd=NO
          cron=NO
          postfix=NO
          bthcid=NO
          sdpd=NO
          fccache=NO
          virecover=NO
          entropy=""
          makemandb=NO
          dhcpcd=YES
          sshd=YES ssh_keygen_flags="-b 1024"
          EOF
          cp rc.conf targetroot/etc
          touch image.spec
          cat targetroot/etc/mtree/* | sed -e 's/ size=[0-9]*//' >> image.spec
          sh targetroot/dev/MAKEDEV -s all | sed -e '/^\. type=dir/d' -e 's,^\.,./dev,' >> image.spec
          cat >> image.spec <<EOF
          ./kern type=dir  mode=0755
          ./proc type=dir  mode=0755
          ./tmp  type=dir  mode=1777
          ./netbsd type=file  mode=0755
          ./root/.ssh type=dir uname=root gname=wheel mode=0755
          ./root/.ssh/authorized_keys type=file uname=root gname=wheel  mode=0600
          EOF
          cat > sshd_config <<EOF
          AllowUsers root@${HOST_IP}
          PermitRootLogin yes
          #PermitEmptyPasswords yes
          #AuthenticationMethods none
          #UsePam no
          IgnoreUserKnownHosts yes
          EOF
          cat targetroot/etc/ssh/sshd_config >> sshd_config
          cp sshd_config targetroot/etc/ssh
          ssh-keygen -t ecdsa -f targetroot/etc/ssh/ssh_host_ecdsa_key -N '' -q
          ssh-keygen -t ed25519 -f targetroot/etc/ssh/ssh_host_ed25519_key -N '' -q
          ssh-keygen -t rsa -f targetroot/etc/ssh/ssh_host_rsa_key -N '' -q
          mkdir -p $HOME/.ssh
          ssh-keygen -t ed25519 -f $HOME/.ssh/id_ed25519 -N '' -q
          cat > $HOME/.ssh/config <<EOF
          StrictHostKeyChecking no
          Host *
           IdentityFile ~/.ssh/id_ed25519
          EOF
          mkdir -p targetroot/root/.ssh
          touch targetroot/root/.ssh/authorized_keys
          cat $HOME/.ssh/id_ed25519.pub >> targetroot/root/.ssh/authorized_keys
          chmod 600 targetroot/root/.ssh/authorized_keys
          ${TOOLDIR}/bin/nbmakefs -t ffs -M ${IMAGESIZE} -m ${IMAGESIZE} -B ${TARGET_ENDIAN} -F image.spec -N targetroot/etc ${IMAGE} targetroot
          cat > disklabel.proto <<EOF
          type: SCSI
          disk: ci-${MACHINE}
          label: 
          flags:
          bytes/sector: 512
          sectors/track: ${SECTORS}
          tracks/cylinder: ${HEADS}
          sectors/cylinder: $((${HEADS} * ${SECTORS}))
          cylinders: ${CYLINDERS}
          total sectors: ${IMAGESECTORS}
          rpm: 3600
          interleave: 1
          trackskew: 0
          cylinderskew: 0
          headswitch: 0
          track-to-track seek: 0
          drivedata: 0 
          
          8 partitions:
          # size offset fstype [fsize bsize cpg/sgs]
          a: ${IMAGESECTORS} 0 4.2BSD 2048 16384 128
          c: ${IMAGESECTORS} 0 0 0
          EOF
          ${TOOLDIR}/bin/nbdisklabel -R -F -M ${MACHINE} ${IMAGE} disklabel.proto
          ${TOOLDIR}/bin/nbinstallboot -v -m ${MACHINE} ${IMAGE} targetroot/${PRIMARY_BOOT}

      - name: build opensimh
        run: |
          cd $HOME
          SIMH_BOOT=simh-boot-netbsd-vax
          echo "SIMH_BOOT=$SIMH_BOOT" >> $GITHUB_ENV
          SSH_PORT=10020
          echo "SSH_PORT=$SSH_PORT" >> $GITHUB_ENV
          GUEST_IP=10.0.2.15
          git clone https://github.com/open-simh/simh
          (cd simh && make TESTS=0 microvax3900)
          touch ${SIMH_BOOT}
          cat > ${SIMH_BOOT} <<EOF
          set cpu 256m
          set nothrottle
          set rq0 ra92
          attach rq0 ${IMAGE}
          attach xq nat:tcp=${SSH_PORT}:${GUEST_IP}:22
          expect ">>>" send "boot dua0\r"; continue
          boot cpu
          EOF
          cat ${SIMH_BOOT}

      - name: start simh
        run: |
          cd $HOME
          echo "start simh and wait for NetBSD to reach multi-user mode"
          echo "boot dua0" | simh/BIN/microvax3900 ${SIMH_BOOT} > simh.log 2>&1 &
          TIMEOUT=600
          INTERVAL=10
          while true; do
            if grep -q "^login:" simh.log; then
              cat simh.log
              echo
              echo "NetBSD/vax on simh is ready"
              break
            fi
            if [ "$SECONDS" -ge "$TIMEOUT" ]; then
              echo "Timeout: simh doesn't start properly"
              cat simh.log
              exit 1
            fi
            sleep $INTERVAL
            echo "waiting simh to reach multi-user ($SECONDS s)"
          done

      - uses: actions/checkout@v4

      - name: copy source tree to vm
        run: |
          cd $HOME
          tar --exclude _actions --exclude _PipelineMapping --exclude _temp -cf - work | ssh -p ${SSH_PORT} root@localhost tar -xvf -

      - name: build on simh
        run: |
          WORKDIR="${GITHUB_WORKSPACE##$HOME/}"
          CONFIGURE_CMD="cp src/config.h-netbsd src/config.h"
          BUILD_CMD="make && make install"
          ssh -p ${SSH_PORT} root@localhost "cd $WORKDIR && $CONFIGURE_CMD && $BUILD_CMD"
